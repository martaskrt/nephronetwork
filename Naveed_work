import pydicom as dicom
import os, subprocess
import cv2
import pandas as pd
import shutil
import numpy as np



# Getting the image path
def extract_cab(img, folder_path):
    new_dir = []
    new_dir = img.split(".")
    folder_name = folder_path+new_dir[0]
    if os.path.exists(folder_name):
        shutil.rmtree(folder_name, ignore_errors=True)
    os.mkdir(folder_name)
    # print(files)
    # print(os.listdir())
    subprocess.run(['expand', folder_path+img, '-F:*', folder_name])
    return(folder_name,new_dir)

# loads all dicom image paths to array
def load_file_dcm(folder_name):
    dcm_files = []
    for subdir, dirs, files in os.walk(folder_name):
        for file in files:
           if file.lower()[-4:] == ".dcm":
               dcm_files.append(os.path.join(subdir, file))
    return sorted(dcm_files)


# for converting the image files to JPEG and record meta data csv
def convert_to_jpg(dcm_files,folder_name,new_dir):
    for n, image in enumerate(dcm_files):
        # print(dcm_files)
        # print(image)
        ds = dicom.dcmread(image, force=True)
        # print(ds)
        meta = ds.get('InstanceNumber', 'n/a'), ds.get('StudyDate', 'n/a'), ds.get('AcquisitionTime', 'n/a'), \
            ds.get('Manufacturer', 'n/a'), ds.get('ManufacturerModelName', 'n/a'), ds.get('SoftwareVersions', 'n/a'), \
            ds.get('TransducerType', 'n/a'), ds.get('SamplesPerPixel', 'n/a'), ds.get('PhotometricInterpretation', 'n/a'),\
            ds.get('PlanarConfiguration', 'n/a'), ds.get('UltrasoundColorDataPresent', 'n/a'),\

        # For testing a new attribute only
        # try:
        #     ds.SamplesperPixel
        # except AttributeError as Nan:
        #     pass

        # a = ds.get('SamplesPerPixel', "N/A")
        # print(a)


        meta2 = ds[0x0018, 0x6011][0]
        meta3 = meta2.get('RegionSpatialFormat', 'n/a'), meta2.get('RegionDataType', 'n/a'), meta2.get('RegionFlags', 'n/a'), \
                meta2.get('RegionLocationMinX0', 'n/a'), meta2.get('RegionLocationMinY0', 'n/a'), meta2.get('RegionLocationMaxX1', 'n/a'), \
                meta2.get('RegionLocationMaxY1', 'n/a'), meta2.get('ReferencePixelX0', 'n/a'), \
                meta2.get('ReferencePixelY0', 'n/a'), meta2.get('PhysicalUnitsXDirection', 'n/a'), \
                meta2.get('PhysicalUnitsYDirection', 'n/a'), meta2.get('ReferencePixelPhysicalValueX', 'n/a'), \
                meta2.get('ReferencePixelPhysicalValueY', 'n/a'), meta2.get('PhysicalDeltaX', 'n/a'), \
                meta2.get('PhysicalDeltaY', 'n/a'), meta2.get('TransducerFrequency', 'n/a')

        csv = pd.DataFrame([meta + meta3])
        intt = new_dir[0] + '_' + str(n)
        print(intt)
        csv1 = pd.DataFrame([intt])
        csv = pd.concat([csv1 , csv],axis=1)
        # print(csv)

        header = ['Image','InstanceNumber', 'StudyDate','AcquisitionTime', 'Manufacturer', 'ManufacturerModelName',
                  'SoftwareVersions', 'TransducerType','SamplesPerPixel','PhotometricInterpretation',
                  'PlanarConfiguration', 'UltrasoundColorDataPresent', 'RegionSpatialFormat', 'RegionDataType',
                  'RegionFlags', 'RegionLocationMinX0', 'RegionLocationMinY0', 'RegionLocationMaxX1',
                  'RegionLocationMaxY1', 'ReferencePixelX0', 'ReferencePixelY0', 'PhysicalUnitsXDirection',
                  'PhysicalUnitsYDirection', 'ReferencePixelPhysicalValueX', 'ReferencePixelPhysicalValueY',
                  'PhysicalDeltaX', 'PhysicalDeltaY', 'TransducerFrequency']
        if header == np.nan:
            0
        csv_name = os.path.join(folder_name, new_dir[0]+'.csv')
        if n == 0:
            csv.to_csv(csv_name, mode='a',header=header, index=False)
        csv.to_csv(csv_name, mode='a', header= None, index=False)
        # head = pd.DataFrame(header)
        # head.to_csv(os.path.join(folder_name, new_dir[0]+'header.csv'))
        pixel_array_numpy = ds.pixel_array
        width = 1024
        height = 768
        dim = (width,height)
        try:
            pixel_array_numpy = cv2.resize(pixel_array_numpy,dim,interpolation=cv2.INTER_AREA)
        except cv2.error:
            print("Unrecognized format")
            continue
        name = os.path.join(folder_name, new_dir[0]+'_'+str(n)+'.jpg')
        cv2.imwrite(name, pixel_array_numpy)
        # dicom.dcmwrite(name, ds)


        # For applying the segementation
        orig = cv2.imread(name)
        print(orig.shape)
        gray = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)
        (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(gray)

        if maxVal > 250:
            cmd = 'python 1.image_seg.py -i ' + str(name)
            print(cmd)
            os.system(cmd)
        elif maxVal < 250:
            cmd = 'python 2.k_means.py -i ' + str(name)
            print(cmd)
            os.system(cmd)
        if n % 10 == 0:
            print('{} image converted'.format(n))
    return


# Specify the .cab folder path
folder_path = "C:/Cab-data/"
images_path = os.listdir(folder_path)
for img in images_path:
    a = print(img)

    dcm_files = []
    try:
        folder_name, new_dir = extract_cab(img, folder_path)
    except FileNotFoundError:
        print('continue')
    dcm_files = load_file_dcm(folder_name)
    # try:
    #     convert_to_jpg(dcm_files, folder_name, new_dir)
    # except AttributeError or KeyError:
    #     print("Error getting the required attribute - skipping the cab file")
    # continue
    try:
        convert_to_jpg(dcm_files, folder_name, new_dir)
    except KeyError:
        print('Invalid file')
    continue
